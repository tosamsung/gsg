// vite.config.ts
import "file:///C:/Users/ACER/Desktop/gsg/node_modules/dotenv/config.js";
import { defineConfig } from "file:///C:/Users/ACER/Desktop/gsg/node_modules/vite/dist/node/index.js";
import { getMaps, getMapsOptimizers, getMapsScripts, LogLevel } from "file:///C:/Users/ACER/Desktop/gsg/node_modules/wa-map-optimizer-vite/dist/index.js";
var maps = getMaps();
var optimizerOptions = {
  logs: process.env.LOG_LEVEL && process.env.LOG_LEVEL in LogLevel ? LogLevel[process.env.LOG_LEVEL] : LogLevel.NORMAL
};
if (process.env.TILESET_OPTIMIZATION && process.env.TILESET_OPTIMIZATION === "true") {
  const qualityMin = process.env.TILESET_OPTIMIZATION_QUALITY_MIN ? parseInt(process.env.TILESET_OPTIMIZATION_QUALITY_MIN) : 0.9;
  const qualityMax = process.env.TILESET_OPTIMIZATION_QUALITY_MAX ? parseInt(process.env.TILESET_OPTIMIZATION_QUALITY_MAX) : 1;
  optimizerOptions.output = {
    tileset: {
      compress: {
        quality: [qualityMin, qualityMax]
      }
    }
  };
}
var vite_config_default = defineConfig({
  base: "./",
  build: {
    sourcemap: true,
    rollupOptions: {
      input: {
        index: "./index.html",
        ...getMapsScripts(maps)
      }
    }
  },
  plugins: [...getMapsOptimizers(maps, optimizerOptions)],
  server: {
    host: "localhost",
    headers: {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, PATCH, OPTIONS",
      "Access-Control-Allow-Headers": "X-Requested-With, content-type, Authorization",
      "Cache-Control": "no-cache, no-store, must-revalidate"
    },
    open: "/"
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxBQ0VSXFxcXERlc2t0b3BcXFxcZ3NnXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxBQ0VSXFxcXERlc2t0b3BcXFxcZ3NnXFxcXHZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi9Vc2Vycy9BQ0VSL0Rlc2t0b3AvZ3NnL3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0ICdkb3RlbnYvY29uZmlnJztcbmltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gXCJ2aXRlXCI7XG5pbXBvcnQgeyBnZXRNYXBzLCBnZXRNYXBzT3B0aW1pemVycywgZ2V0TWFwc1NjcmlwdHMsIExvZ0xldmVsLCBPcHRpbWl6ZU9wdGlvbnMgfSBmcm9tIFwid2EtbWFwLW9wdGltaXplci12aXRlXCI7XG5cbmNvbnN0IG1hcHMgPSBnZXRNYXBzKCk7XG5cbmxldCBvcHRpbWl6ZXJPcHRpb25zOiBPcHRpbWl6ZU9wdGlvbnMgPSB7XG4gICAgbG9nczogcHJvY2Vzcy5lbnYuTE9HX0xFVkVMICYmIHByb2Nlc3MuZW52LkxPR19MRVZFTCBpbiBMb2dMZXZlbCA/IExvZ0xldmVsW3Byb2Nlc3MuZW52LkxPR19MRVZFTF0gOiBMb2dMZXZlbC5OT1JNQUwsXG59O1xuXG5pZiAocHJvY2Vzcy5lbnYuVElMRVNFVF9PUFRJTUlaQVRJT04gJiYgcHJvY2Vzcy5lbnYuVElMRVNFVF9PUFRJTUlaQVRJT04gPT09IFwidHJ1ZVwiKSB7XG4gICAgY29uc3QgcXVhbGl0eU1pbiA9IHByb2Nlc3MuZW52LlRJTEVTRVRfT1BUSU1JWkFUSU9OX1FVQUxJVFlfTUlOID8gcGFyc2VJbnQocHJvY2Vzcy5lbnYuVElMRVNFVF9PUFRJTUlaQVRJT05fUVVBTElUWV9NSU4pIDogMC45O1xuICAgIGNvbnN0IHF1YWxpdHlNYXggPSBwcm9jZXNzLmVudi5USUxFU0VUX09QVElNSVpBVElPTl9RVUFMSVRZX01BWCA/IHBhcnNlSW50KHByb2Nlc3MuZW52LlRJTEVTRVRfT1BUSU1JWkFUSU9OX1FVQUxJVFlfTUFYKSA6IDE7XG5cbiAgICBvcHRpbWl6ZXJPcHRpb25zLm91dHB1dCA9IHtcbiAgICAgICAgdGlsZXNldDoge1xuICAgICAgICAgICAgY29tcHJlc3M6IHtcbiAgICAgICAgICAgICAgICBxdWFsaXR5OiBbcXVhbGl0eU1pbiwgcXVhbGl0eU1heF0sXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XG4gICAgYmFzZTogXCIuL1wiLFxuICAgIGJ1aWxkOiB7XG4gICAgICAgIHNvdXJjZW1hcDogdHJ1ZSxcbiAgICAgICAgcm9sbHVwT3B0aW9uczoge1xuICAgICAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAgICAgICBpbmRleDogXCIuL2luZGV4Lmh0bWxcIixcbiAgICAgICAgICAgICAgICAuLi5nZXRNYXBzU2NyaXB0cyhtYXBzKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBwbHVnaW5zOiBbLi4uZ2V0TWFwc09wdGltaXplcnMobWFwcywgb3B0aW1pemVyT3B0aW9ucyldLFxuICAgIHNlcnZlcjoge1xuICAgICAgICBob3N0OiBcImxvY2FsaG9zdFwiLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiOiBcIipcIixcbiAgICAgICAgICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kc1wiOiBcIkdFVCwgUE9TVCwgUFVULCBERUxFVEUsIFBBVENILCBPUFRJT05TXCIsXG4gICAgICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnNcIjogXCJYLVJlcXVlc3RlZC1XaXRoLCBjb250ZW50LXR5cGUsIEF1dGhvcml6YXRpb25cIixcbiAgICAgICAgICAgIFwiQ2FjaGUtQ29udHJvbFwiOiBcIm5vLWNhY2hlLCBuby1zdG9yZSwgbXVzdC1yZXZhbGlkYXRlXCIsXG4gICAgICAgIH0sXG4gICAgICAgIG9wZW46IFwiL1wiLFxuICAgIH0sXG59KTtcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBdVEsT0FBTztBQUM5USxTQUFTLG9CQUFvQjtBQUM3QixTQUFTLFNBQVMsbUJBQW1CLGdCQUFnQixnQkFBaUM7QUFFdEYsSUFBTSxPQUFPLFFBQVE7QUFFckIsSUFBSSxtQkFBb0M7QUFBQSxFQUNwQyxNQUFNLFFBQVEsSUFBSSxhQUFhLFFBQVEsSUFBSSxhQUFhLFdBQVcsU0FBUyxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVM7QUFDbEg7QUFFQSxJQUFJLFFBQVEsSUFBSSx3QkFBd0IsUUFBUSxJQUFJLHlCQUF5QixRQUFRO0FBQ2pGLFFBQU0sYUFBYSxRQUFRLElBQUksbUNBQW1DLFNBQVMsUUFBUSxJQUFJLGdDQUFnQyxJQUFJO0FBQzNILFFBQU0sYUFBYSxRQUFRLElBQUksbUNBQW1DLFNBQVMsUUFBUSxJQUFJLGdDQUFnQyxJQUFJO0FBRTNILG1CQUFpQixTQUFTO0FBQUEsSUFDdEIsU0FBUztBQUFBLE1BQ0wsVUFBVTtBQUFBLFFBQ04sU0FBUyxDQUFDLFlBQVksVUFBVTtBQUFBLE1BQ3BDO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFDSjtBQUVBLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQ3hCLE1BQU07QUFBQSxFQUNOLE9BQU87QUFBQSxJQUNILFdBQVc7QUFBQSxJQUNYLGVBQWU7QUFBQSxNQUNYLE9BQU87QUFBQSxRQUNILE9BQU87QUFBQSxRQUNQLEdBQUcsZUFBZSxJQUFJO0FBQUEsTUFDMUI7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUFBLEVBQ0EsU0FBUyxDQUFDLEdBQUcsa0JBQWtCLE1BQU0sZ0JBQWdCLENBQUM7QUFBQSxFQUN0RCxRQUFRO0FBQUEsSUFDSixNQUFNO0FBQUEsSUFDTixTQUFTO0FBQUEsTUFDTCwrQkFBK0I7QUFBQSxNQUMvQixnQ0FBZ0M7QUFBQSxNQUNoQyxnQ0FBZ0M7QUFBQSxNQUNoQyxpQkFBaUI7QUFBQSxJQUNyQjtBQUFBLElBQ0EsTUFBTTtBQUFBLEVBQ1Y7QUFDSixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
